import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:lesson3/model/constant.dart';

class Comments { 

  //keys for Firestore doc
  static const CONTENT = 'content';
  static const CREATED_BY = 'createdBy';
  static const ORIGINAL_POSTER = 'originalPoster';
  static const PHOTO_MEMO_ID = 'photo_memo_id';
  static const TIMESTAMP = 'timestamp';

  String? docId; //Firestore autogenerated doc id
  late String createdBy; //email == user id
  late String content;
  late String originalPoster;
  late String photoMemoId;
  DateTime? timestamp;

  Comments({
    this.docId,
    this.createdBy = '',
    this.content = '',
    this.originalPoster = '',
    this.photoMemoId = '',
    this.timestamp,
  });

  Comments.clone(Comments comments) {
    this.docId = comments.docId;
    this.createdBy = comments.createdBy;
    this.originalPoster = comments.originalPoster;
    this.content = comments.content;
    this.photoMemoId = comments.photoMemoId;
    this.timestamp = comments.timestamp;
  }

  void assign(Comments comment) {
    this.docId = comment.docId;
    this.createdBy = comment.createdBy;
    this.content = comment.content;
    this.originalPoster = comment.originalPoster;
    this.photoMemoId = comment.photoMemoId;
    this.timestamp = comment.timestamp;
  }

  Map<String, dynamic> toFirestoreDoc() {
    return {
      CONTENT: this.content,
      CREATED_BY: this.createdBy,
      ORIGINAL_POSTER: this.originalPoster,
      PHOTO_MEMO_ID: this.photoMemoId,
      TIMESTAMP: this.timestamp,
    };
  }

  static Comments? fromFirestoreDoc(
      {required Map<String, dynamic> doc, required String docId}) {
    for (var key in doc.keys) {
      if (doc[key] == null) return null;
    }
    return Comments(
      docId: docId,
      createdBy: doc[CREATED_BY] ??= 'N/A',
      content: doc[CONTENT] ??= 'N/A',
      originalPoster: doc[ORIGINAL_POSTER] ??= 'N/A',
      photoMemoId: doc[PHOTO_MEMO_ID] ??= 'N/A',
      timestamp: doc[TIMESTAMP] != null
          ? DateTime.fromMillisecondsSinceEpoch(
              doc[TIMESTAMP].millisecondsSinceEpoch)
          : DateTime.now(),
    );
  }
}
